local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/ago106/ScriptsRoblox/main/UI%20Library/Fluent"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ago106/ScriptsRoblox/main/UI%20Library/SaveManager"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/ago106/ScriptsRoblox/main/UI%20Library/InterfaceManager"))()

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local Window = Fluent:CreateWindow({
    Title = "ExsScript",
    SubTitle = "v1.0 | Free",
    TabWidth = 160,
    Size = UDim2.fromOffset(600, 480),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.RightControl
})

local Tabs = {
    Main = Window:AddTab({Title = "Home", Icon = "home"}),
    Farming = Window:AddTab({Title = "Farming", Icon = "leaf"}),
    Settings = Window:AddTab({Title = "Settings", Icon = "settings"})
}

local Utils = {
    ShowNotification = function(title, content)
        Fluent:Notify({
            Title = title,
            Content = content,
            Duration = 5
        })
    end,

    PressKey = function(key, duration)
        duration = duration or 0.1
        game:GetService("VirtualInputManager"):SendKeyEvent(true, key, false, game)
        task.wait(duration)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, key, false, game)
    end,
    
    Teleport = function(cframe)
        local character = LocalPlayer.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = cframe
            return true
        end
        return false
    end
}

local Settings = {
    AutoFarm = {
        Enabled = false,
        Delay = 0.1, -- Увеличенная задержка
        Range = 30,
        OptimizePath = true,
        FarmHeight = 1,
        AutoFarmRestart = true,
        HumanLike = true -- Новая настройка для "человекоподобного" поведения
    },
    AutoSell = {
        Enabled = false,
        CheckInterval = 1,
        TeleportDistance = 3,
        SellCooldown = 1
    }
}

local GameConfig = {
    FarmObjectName = "Farm",
    InventorySize = 50,
    SellNPCName = "Sell Stands",
    SellEvent = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory")
}

local CachedPlants = {}
local LastPlantUpdate = 0
local CachedNPCCFrame = nil
local LastNPCCheck = 0
local IsSelling = false
local OriginalPosition = nil

local function UpdatePlantCache()
    local now = tick()
    if now - LastPlantUpdate < 5 then return CachedPlants end
    
    CachedPlants = {}
    for _, farm in ipairs(Workspace:GetDescendants()) do
        if farm.Name == GameConfig.FarmObjectName then
            local important = farm:FindFirstChild("Important")
            if important then
                local data = important:FindFirstChild("Data")
                if data then
                    local owner = data:FindFirstChild("Owner")
                    if owner and ((owner:IsA("StringValue") and owner.Value == LocalPlayer.Name) or 
                                 (owner:IsA("ObjectValue") and owner.Value == LocalPlayer)) then
                        local plantsFolder = important:FindFirstChild("Plants_Physical")
                        if plantsFolder then
                            for _, plant in ipairs(plantsFolder:GetChildren()) do
                                local plantPart = plant:IsA("BasePart") and plant or plant:FindFirstChildWhichIsA("BasePart")
                                if plantPart then
                                    table.insert(CachedPlants, {
                                        Object = plant,
                                        Part = plantPart,
                                        Position = plantPart.Position
                                    })
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    if Settings.AutoFarm.OptimizePath and #CachedPlants > 0 then
        table.sort(CachedPlants, function(a, b)
            return (a.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 
                   (b.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        end)
    end
    
    LastPlantUpdate = now
    return CachedPlants
end

local function FindSellNPC()
    local now = tick()
    if CachedNPCCFrame and now - LastNPCCheck < 30 then
        return CachedNPCCFrame
    end
    
    CachedNPCCFrame = nil
    
    local npc = Workspace:FindFirstChild("NPCS"):FindFirstChild(GameConfig.SellNPCName)
    if npc then
        local rootPart = npc:FindFirstChild("HumanoidRootPart") or 
                       npc:FindFirstChild("Head") or
                       npc:FindFirstChildWhichIsA("BasePart")
        if rootPart then
            CachedNPCCFrame = rootPart.CFrame
            LastNPCCheck = now
            Utils.ShowNotification("NPC Found", "Located: "..GameConfig.SellNPCName)
            return CachedNPCCFrame
        end
    end
    
    Utils.ShowNotification("Error", "Sell NPC not found!")
    return nil
end

local function TeleportToNPC(npcCFrame)
    if not npcCFrame then return false end
    
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return false
    end

    local teleportCFrame = npcCFrame * CFrame.new(0, 0, Settings.AutoSell.TeleportDistance)
    character.HumanoidRootPart.CFrame = teleportCFrame
    task.wait(0.5)
    
    return (character.HumanoidRootPart.Position - npcCFrame.Position).Magnitude < 15
end

local function IsInventoryFull()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    return backpack and #backpack:GetChildren() >= GameConfig.InventorySize
end

local function PerformSell()
    IsSelling = true
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        OriginalPosition = character.HumanoidRootPart.CFrame
    end
    
    local npcCFrame = FindSellNPC()
    if not npcCFrame then
        IsSelling = false
        return false
    end
    
    if not TeleportToNPC(npcCFrame) then
        Utils.ShowNotification("Error", "Failed to reach NPC")
        IsSelling = false
        return false
    end
    
    Utils.PressKey(Enum.KeyCode.E, 0.5)
    task.wait(0.5)
    
    local success = pcall(function()
        GameConfig.SellEvent:FireServer()
    end)
    
    task.wait(0.5)
    if OriginalPosition then
        Utils.Teleport(OriginalPosition)
    end
    
    IsSelling = false
    
    if success then
        Utils.ShowNotification("Success", "Items sold successfully")
        if Settings.AutoFarm.Enabled and Settings.AutoFarm.AutoFarmRestart then
            task.spawn(AutoFarm)
        end
        return true
    else
        Utils.ShowNotification("Error", "Failed to sell items")
        return false
    end
end

local function AutoFarm()
    if not Settings.AutoFarm.Enabled then return end
    
    while Settings.AutoFarm.Enabled do
        local plants = UpdatePlantCache()
        if #plants > 0 then
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                for _, plantData in ipairs(plants) do
                    if not Settings.AutoFarm.Enabled then break end
                    
                    local distance = (plantData.Position - char.HumanoidRootPart.Position).Magnitude
                    if distance < Settings.AutoFarm.Range then
                        -- Изменения для более "легитного" поведения:
                        if Settings.AutoFarm.HumanLike then
                            -- Медленное перемещение вместо мгновенного телепорта
                            local steps = 5
                            local startPos = char.HumanoidRootPart.Position
                            local targetPos = plantData.Part.Position + Vector3.new(0, Settings.AutoFarm.FarmHeight, 0)
                            
                            for i = 1, steps do
                                if not Settings.AutoFarm.Enabled then break end
                                local lerpPos = startPos:Lerp(targetPos, i/steps)
                                char.HumanoidRootPart.CFrame = CFrame.new(lerpPos)
                                task.wait(0.05 + math.random()*0.05) -- Случайные задержки
                            end
                        else
                            -- Оригинальный телепорт
                            local targetCFrame = plantData.Part.CFrame * CFrame.new(0, Settings.AutoFarm.FarmHeight, 0)
                            Utils.Teleport(targetCFrame)
                        end
                        
                        -- Нажатие E с случайной задержкой
                        local pressDuration = 0.05 + (Settings.AutoFarm.HumanLike and math.random()*0.1 or 0)
                        Utils.PressKey(Enum.KeyCode.E, pressDuration)
                        
                        -- Случайная пауза между растениями
                        if Settings.AutoFarm.HumanLike and math.random() > 0.7 then
                            task.wait(0.1 + math.random()*0.3)
                        end
                    end
                    task.wait(Settings.AutoFarm.Delay)
                end
            end
        else
            Utils.ShowNotification("Warning", "No plants detected")
            task.wait(3)
        end
        task.wait(0.5)
    end
end

-- Элементы интерфейса
local AutoFarmToggle = Tabs.Farming:AddToggle("AutoFarmToggle", {
    Title = "Auto-Farm System",
    Description = "Automatic resource collection",
    Default = false
}):OnChanged(function(state)
    Settings.AutoFarm.Enabled = state
    if state then
        task.spawn(AutoFarm)
    end
end)

Tabs.Farming:AddToggle("HumanLikeToggle", {
    Title = "Human-like Movement",
    Description = "More natural movement patterns",
    Default = true
}):OnChanged(function(state)
    Settings.AutoFarm.HumanLike = state
end)

local AutoSellToggle = Tabs.Farming:AddToggle("AutoSellToggle", {
    Title = "Auto-Sell System",
    Description = "Automatically sell when inventory is full",
    Default = false
}):OnChanged(function(state)
    Settings.AutoSell.Enabled = state
    if state then
        task.spawn(function()
            while Settings.AutoSell.Enabled do
                if IsInventoryFull() then
                    Utils.ShowNotification("System", "Inventory full, starting sell procedure...")
                    local success = PerformSell()
                    if success then
                        task.wait(Settings.AutoSell.SellCooldown)
                    else
                        task.wait(5)
                    end
                end
                task.wait(Settings.AutoSell.CheckInterval)
            end
        end)
    end
end)

-- Дополнительные настройки
Tabs.Farming:AddSlider("FarmDelaySlider", {
    Title = "Collection Delay",
    Description = "Delay between plant collections",
    Default = 10,
    Min = 1,
    Max = 30,
    Rounding = 0,
    Callback = function(value)
        Settings.AutoFarm.Delay = value/100
    end
})

Tabs.Farming:AddSlider("FarmRangeSlider", {
    Title = "Collection Range",
    Description = "Maximum distance to collect plants",
    Default = 30,
    Min = 10,
    Max = 50,
    Rounding = 0,
    Callback = function(value)
        Settings.AutoFarm.Range = value
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
InterfaceManager:SetFolder("ExsScriptConfig")
SaveManager:SetFolder("ExsScriptConfig/settings")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)

Utils.ShowNotification("System", "Script initialized successfully!")
SaveManager:LoadAutoloadConfig()
